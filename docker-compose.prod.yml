version: '3.8'

services:
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./backend:/var/www
      - ./backend/storage:/var/www/storage
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    networks:
      - app-network
    depends_on:
      - mysql

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: frontend
    restart: "no"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network
    environment:
      - NODE_ENV=production
    stdin_open: true
    tty: true
    depends_on:
      - app

  # Servidor web (Nginx)
  webserver:
    image: nginx:alpine
    container_name: webserver
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/conf.d/default.prod.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      # Montar o diretório de build do frontend no Nginx
      - ./frontend/dist/spa:/var/www/frontend
    networks:
      - app-network
    depends_on:
      - frontend # Nginx agora depende do frontend para servir os arquivos estáticos
      - app # E também do backend para fazer o proxy reverso

  # Banco de dados MySQL
  mysql:
    image: mysql:8.0
    container_name: mysql_onfly
    restart: unless-stopped
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
    volumes:
      - ./mysql:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge